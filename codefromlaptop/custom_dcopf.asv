function [results, obj_val,generator_vals] = custom_dcopf(case_name,type_of_min,carbon_cost)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
% if carbon_cost = True, will run carbon optimization based on economic
% cost of carbon
%% 1. Load case
    % mpc = loadcase('Fall116Generous');   % replace with your case file
    mpc = loadcase(case_name);


    %% 2. Save original costs
    orig_gencost = mpc.gencost;   % full backup

    % disp(orig_gencost);
    high_estimate_costs = [
        
    0.000000000000000000e+00;
5.374672901722723140e+01;
7.246656191291578401e-07;
0.000000000000000000e+00;
0.000000000000000000e+00;
1.169190877666764550e+01;0.000000000000000000e+00;
7.348003919583820043e+00;0.000000000000000000e+00;
2.542076053944515024e+03;9.431391249592208226e+01;0.000000000000000000e+00;
1.468668175233070201e+02;0.000000000000000000e+00;5.060653736886130361e+01;1.171227524182394745e+03;
4.100082128042653267e+02;1.198595841790736785e+02;1.198595279142268026e+02;1.198595550526913200e+02;1.209862509929198779e+02;9.431390831864381141e+01;1.305604286454129408e+02;9.200488314461722439e+01;6.529686932203776273e+00;2.969645379289908682e+00;2.902121261470498315e+00;4.653661864536261987e+02;8.309683436589203609e+01;1.176945412868455833e+03;1.033338688267716208e+02;1.033337276233113045e+02;0.000000000000000000e+00;1.139190729568042286e+02;8.812035421713601124e+01;1.139191188086145843e+02;1.758232368409921094e+02;3.725641543621768648e+01;0.000000000000000000e+00;3.887820448053059863e+01;1.169192357828745621e+01;1.169190709706035136e+01]
       
    low_estimate_costs= [0.000000000000000000e+00;3.986550710447019696e+01;4.525061410772726640e-06;0.000000000000000000e+00;0.000000000000000000e+00;9.173688810101044311e+00;0.000000000000000000e+00;5.326036354840452347e+00;0.000000000000000000e+00;1.803977118599545520e+03;7.087317001842640707e+01;0.000000000000000000e+00;8.713236336807263172e+01;0.000000000000000000e+00;2.977542873836143400e+01;8.733223273081655407e+02;2.905190425555260276e+02;8.999393165306497622e+01;8.999390775695194122e+01;8.999386746392687542e+01;8.819177276101606822e+01;7.087318574132874005e+01;9.620592746033563003e+01;7.124231452306824508e+01;4.869637419339325923e+00;2.248398708918833311e+00;2.170668546315400960e+00;3.304959006932285774e+02;4.848495842900464936e+01;9.020058019042498927e+02;6.455861035348395660e+01;6.455854118227725280e+01;0.000000000000000000e+00;7.159846905307570353e+01;5.050328550644467640e+01;7.159854130799860172e+01;1.164360935831792574e+02;2.891185916031002989e+01;0.000000000000000000e+00;3.076987901768834632e+01;9.173708971709249482e+00;9.173755480637446169e+00];
    
    
    % Start of Running Carbon Cost!!!
    carbon_emissions = [0.000000000000000000e+00;4.849999999999999867e-01;4.849999999999999867e-01;0.000000000000000000e+00;0.000000000000000000e+00;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;1.229999999999999982e+00;4.849999999999999867e-01;0.000000000000000000e+00;4.849999999999999867e-01;0.000000000000000000e+00;4.849999999999999867e-01;1.229999999999999982e+00;1.229999999999999982e+00;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;1.229999999999999982e+00;4.849999999999999867e-01;1.229999999999999982e+00;4.849999999999999867e-01;4.849999999999999867e-01;0.000000000000000000e+00;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01;0.000000000000000000e+00;4.849999999999999867e-01;0.000000000000000000e+00;4.849999999999999867e-01;4.849999999999999867e-01;4.849999999999999867e-01];
    
    carbon_costs = [0.000000000000000000e+00;8.142014519056259303e+01;8.142014519056259303e+01;0.000000000000000000e+00;0.000000000000000000e+00;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;2.064882032667876217e+02;8.142014519056259303e+01;0.000000000000000000e+00;8.142014519056259303e+01;0.000000000000000000e+00;8.142014519056259303e+01;2.064882032667876217e+02;2.064882032667876217e+02;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;2.064882032667876217e+02;8.142014519056259303e+01;2.064882032667876217e+02;8.142014519056259303e+01;8.142014519056259303e+01;0.000000000000000000e+00;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01;0.000000000000000000e+00;8.142014519056259303e+01;0.000000000000000000e+00;8.142014519056259303e+01;8.142014519056259303e+01;8.142014519056259303e+01];

    % if (type_of_min == "original")
    %     results = rundcopf(mpc);
    % end
    if(type_of_min == "carbon" && carbon_cost == false)
        disp('minimizing carbon emissions')
        % change cost back to origional
        mpc.gencost = orig_gencost;
        % Carbono only emissions 
        for g = 1:size(mpc.gencost, 1)
            mpc.gencost(g, 7) = carbon_emissions(g);
            mpc.gencost(g,6) = 0;
            mpc.gencost(g,8) = 0;
        end
        disp('ran carbon costs')
    end

    if(type_of_min == "carbon" && carbon_cost == true)
        disp('minimizing cost of carbon)')
        % change cost back to origional
        mpc.gencost = orig_gencost;
        % Carbono only emissions 
        for g = 1:size(mpc.gencost, 1)
            mpc.gencost(g, 7) = carbon_costs(g);
            mpc.gencost(g,6) = 0;
            mpc.gencost(g,8) = 0;
        end
    end

    if(type_of_min == "low estimate")
        disp('minimize low estimate')
        for g = 1:size(mpc.gencost, 1)
            mpc.gencost(g, 7) = low_estimate_costs(g);
            mpc.gencost(g,6) = 0;
            mpc.gencost(g,8) = 0;
        end
        disp(mpc.gencost);
    end

    if(type_of_min == "high estimate")
        disp('minimize high estimate')
        for g = 1:size(mpc.gencost, 1)
            mpc.gencost(g, 7) = high_estimate_costs(g);
            mpc.gencost(g,6) = 0;
            mpc.gencost(g,8) = 0;
        end
        disp(mpc.gencost);
    end


    results = rundcopf(mpc);
    generator_vals = results.gen(:, 2);
    obj_val = results.f;

    % change cost back to origional
    mpc.gencost = orig_gencost;


end